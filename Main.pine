//@version=6
indicator(title="Main Chart [AC]", shorttitle = 'MC', overlay = true, max_bars_back = 5000, max_lines_count = 500, max_labels_count = 500, max_boxes_count = 500)

// Exponential Moving Average (EMA)
i1 = input.bool(true, title='EMA')
EM(_l) => _a = 2 / (_l + 1), _s = 0.0, _s := _a * close + (1 - _a) * nz(_s[1]), _s
plot(i1 ? EM(21) : na, color=#ff0000, title="EMA 1"), plot(i1 ? EM(50) : na, color=#ffff00, title="EMA 2"), plot(i1 ? EM(200) : na, color=#ffffff, title="EMA 3")

// EMA Extra
i1a = input.bool(false, title='EMA Extra')
plot(i1a ? EM(7) : na, color=#00ff40, title="EMA 4"), plot(i1a ? EM(100) : na, color=#ffff88, title="EMA 5")

// Bollinger Band (BB)
i2 = input.bool(false, title='Bollinger Band (BB)'), bb_basis = 0.0, bb_dev = 0.0
if i2
    bb_basis := ta.sma(close, 7), bb_dev := 2.0 * ta.stdev(close, 7)
plot(i2 ? bb_basis + bb_dev : na, color=#cccccc, title="BB Upper"), plot(i2 ? bb_basis - bb_dev : na, color=#cccccc, title="BB Lower")

// Parabolic SAR
plot(input.bool(false, title='Parabolic SAR') ? ta.sar(0.01, 0.01, 0.3) : na, style=plot.style_cross, color=#cccccc, title="Parabolic SAR")

// Pivot Points
i4 = input.bool(false, title='Pivot'), pph = ta.pivothigh(10, 10), ppl = ta.pivotlow(10, 10)
if not na(pph) and i4
    label.new(bar_index[10], pph, str.tostring(pph, format.mintick), style=label.style_label_down, color=#444444, textcolor=#ffffff)
if not na(ppl) and i4
    label.new(bar_index[10], ppl, str.tostring(ppl, format.mintick), style=label.style_label_up, color=#444444, textcolor=#ffffff)

// DeMark Sequential
i5 = input.bool(false, title='DeMark'), crossover = false, crossunder = false
if i5
    int uc = 0, dc = 0
    for i = 0 to 8
        uc += (nz(close[i]) > nz(close[i + 4]) ? 1 : 0), dc += (nz(close[i]) < nz(close[i + 4]) ? 1 : 0)
    drp = dc == 9 ? 1 : uc == 9 ? -1 : 0, crossover := ta.crossover(drp, 0), crossunder := ta.crossunder(drp, 0)
plotshape(i5 and crossover, '', shape.labelup, location.belowbar, #00ff00), plotshape(i5 and crossunder, '', shape.labeldown, location.abovebar, #ff0000)

// Ichimoku Cloud
i6 = input.bool(false, title='Ichimoku Cloud'), ict = 0.0, ick = 0.0, ics = 0.0, icu = 0.0
if i6
    ict := (ta.highest(9) + ta.lowest(9)) / 2, ick := (ta.highest(26) + ta.lowest(26)) / 2, ics := (ict + ick) / 2, icu := (ta.highest(52) + ta.lowest(52)) / 2
plot(i6 ? ict : na, color=#2962FF, title="Tenkan"), plot(i6 ? ick : na, color=#b71c1c, title="Kijun"), plot(i6 ? close : na, offset=-25, color=#43a047, title="Chikou")
fill(plot(i6 ? ics : na, offset=25, color=#a5d6a7), plot(i6 ? icu : na, offset=25, color=#ef9a9a, title="Senkou B"), color=ics > icu ? color.new(#43a047, 90) : color.new(#f44336, 90))

// Volume
i7 = input.bool(false, title='Volume')
plot(i7 ? volume : na, style=plot.style_columns, color=open > close ? #b03838 : #008060, title="Volume")

// Volume Profile
i8 = input.bool(true, title="Volume Profile")
scale_volume(a, b) => math.round(a / float(b / 200 * 5))
if i8
    var line poc = na, var line vah = na, var line val = na, var array<line> bars = array.new_line(), var array<float> vo = array.new_float(200, 0)
    float lp = ta.lowest(low, 200), pi = (ta.highest(high, 200) - lp) / 199
    if barstate.isfirst
        for i = 0 to 199
            array.push(bars, line.new(x1=bar_index, y1=close, x2=bar_index, y2=close))
        poc := line.new(x1=bar_index, y1=close, x2=bar_index, y2=close, color=#ff0000)
        vah := line.new(x1=bar_index, y1=close, x2=bar_index, y2=close, color=#2962FF)
        val := line.new(x1=bar_index, y1=close, x2=bar_index, y2=close, color=#2962FF)
    if barstate.islast
        array.fill(vo, 0)
        for i = 0 to 199
            for j = 0 to 199
                float p = lp + pi * j
                if (p >= low[i] and p < high[i])
                    array.set(vo, j, vo.get(j) + volume[i])
        float mv = vo.max(), int mi = vo.indexof(mv),  x2 = bar_index + 70
        for i = 0 to 199
            a = bars.get(i), float y = lp + pi * i
            line.set_xy1(a, x2 - scale_volume(vo.get(i), mv), y), line.set_xy2(a, x2, y), line.set_color(a, mi == i ? #ff0000 : #cccccc)
        float y = lp + pi * mi, a = vo.sum() * 0.68, e = mv, int b = mi, d = mi
        line.set_xy1(poc, bar_index - 200, y), line.set_xy2(poc, x2 - scale_volume(mv, mv) - 10, y)
        while e < a
            float g = (b < 199) ? vo.get(b + 1) : 0.0, h = (d > 0) ? vo.get(d - 1) : 0.0
            if g == 0 and h == 0
                break
            if g >= h
                e += g, b += 1
            else
                e += h, d -= 1
        va_dn = d, va_up = b
        for i = va_dn to va_up
            if i != mi
                line.set_color(bars.get(i), #2962FF)
        int va = bar_index - 200, float vh = lp + pi * va_up, vl = lp + pi * va_dn, sv = x2 - scale_volume(vo.get(va_up), mv) - 10
        line.set_xy1(vah, va, vh), line.set_xy1(val, va, vl), line.set_xy2(vah, sv, vh), line.set_xy2(val, sv, vl)

// Supertrend
i9 = input.bool(true, title="Supertrend")
[st_raw, sd] = ta.supertrend(3.0, 10)
st = i9 ? (barstate.isfirst ? na : st_raw) : na
sb = plot(barstate.isfirst ? na : (open + close) / 2, title="Body Middle", display=display.none)
fill(sb, plot(sd < 0 and i9 ? st : na, "Uptrend", color=#00ff00, style=plot.style_linebr), title="UpFill", color=color.new(color.green, 90), fillgaps=false)
fill(sb, plot(sd >= 0 and i9 ? st : na, "Downtrend", color=#ff0000, style=plot.style_linebr), title="DownFill", color=color.new(color.red, 90), fillgaps=false)

// VWAP Period
plot(input.bool(false, title="VWAP Period") ? math.sum((high+low+close)/3*volume, 14) / math.sum(volume, 14) : na)
